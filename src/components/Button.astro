---
import LanguageSwitcherIcon from '@/assets/icons/language-switcher.svg'
import ThemeToggleIcon from '@/assets/icons/theme-toggle.svg'
import { allLocales, moreLocales, themeConfig } from '@/config'
import { getLangFromPath } from '@/i18n/lang'
import { buildNextLangPath } from '@/i18n/path'
import { isPostPage, isTagPage } from '@/utils/page'

interface Props {
  supportedLangs: string[]
}

const {
  light: { background: lightMode },
  dark: { background: darkMode },
} = themeConfig.color

const { supportedLangs } = Astro.props
const currentPath = Astro.url.pathname
const isPost = isPostPage(currentPath)
const isTag = isTagPage(currentPath)
const currentLang = getLangFromPath(currentPath)

// Check if there are other languages to switch
const showLanguageSwitcher = moreLocales.length > 0
// Check if only the supported language switch list is used
const useSupportedLangs = isPost || (isTag && supportedLangs.length > 0)

// 根据页面类型选择要显示的语言列表
const availableLangs = useSupportedLangs ? supportedLangs : allLocales

// 语言名称映射
const langNames = {
  'de': 'Deutsch',
  'en': 'English',
  'es': 'Español',
  'fr': 'Français',
  'ja': '日本語',
  'ko': '한국어',
  'pl': 'Polski',
  'pt': 'Português',
  'ru': 'Русский',
  'zh': '简体中文',
  'zh-tw': '繁體中文'
}
---

<div
  class:list={[
  'absolute right-7.25vw top-14.6 flex gap-6 min-[823px]:max-[1024px]:right-[calc(50vw-22rem)]',
  'lg:(fixed bottom-48 right-[max(5rem,calc(50vw-35rem))] top-auto w-14rem)',
]}
>
  <!-- Language Switcher -->
  {showLanguageSwitcher && (
    <div class="relative" id="language-switcher">
      <button
        id="language-switcher-button"
        class="aspect-square w-4 c-secondary active:scale-90 hover:c-primary flex items-center"
        aria-label="切换网站语言"
        aria-haspopup="true"
        aria-expanded="false"
      >
        <LanguageSwitcherIcon
          aria-hidden="true"
          fill="currentColor"
        />
      </button>
      
      <div 
        id="language-dropdown" 
        class="absolute hidden bottom-full mb-2 right-0 bg-background shadow-lg rounded-md p-2 min-w-32 z-50 border border-secondary/20"
        style="box-shadow: 0 4px 12px rgba(0,0,0,0.15);"
      >
        <ul class="flex flex-col gap-1.5">
          {availableLangs.map(lang => (
            <li>
              <a 
                href={buildNextLangPath(currentPath, currentLang, lang)}
                class={`block px-3 py-1.5 text-sm rounded-md transition-colors ${currentLang === lang ? 'bg-primary/10 font-bold c-primary' : 'hover:bg-secondary/5 c-secondary hover:c-primary'}`}
              >
                {langNames[lang as keyof typeof langNames] || lang}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  )}

  <!-- Theme Toggle -->
  <button
    id="theme-toggle-button"
    aria-label="Switch light/dark theme"
    class="aspect-square w-4 c-secondary active:scale-90 hover:c-primary"
  >
    <ThemeToggleIcon
      aria-hidden="true"
      fill="currentColor"
    />
  </button>
</div>

<!-- Theme Toggle Script >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
<script
  is:inline
  define:vars={{ lightMode, darkMode }}
>
// Update theme
function updateTheme() {
  // Toggle website theme
  document.documentElement.classList.toggle('dark')

  // Get current theme
  const isDark = document.documentElement.classList.contains('dark')
  // Update meta theme color
  const metaThemeColor = document.head.querySelector('meta[name="theme-color"]')
  if (metaThemeColor) {
    metaThemeColor.setAttribute('content', isDark ? darkMode : lightMode)
  }

  // Update theme configuration in local storage
  localStorage.setItem('theme', isDark ? 'dark' : 'light')
  document.dispatchEvent(new Event('theme-changed'))
}

// Bind click event to the button
function setupThemeToggle() {
  // Locate theme toggle button
  const themeToggleButton = document.getElementById('theme-toggle-button')
  // Add click listener to the button
  if (themeToggleButton) {
    themeToggleButton.addEventListener('click', () => {
      // If reduceMotion is enabled or browser doesn't support View Transitions API, update theme directly
      if (document.documentElement.classList.contains('reduce-motion') || !document.startViewTransition) {
        updateTheme()
        return
      }

      // Temporarily add markers during animation to implement view transition and disable CSS transitions
      document.documentElement.style.setProperty('view-transition-name', 'animation-theme-toggle')
      document.documentElement.setAttribute('data-theme-changing', '')

      // If browser supports View Transitions API, use it to update theme
      const themeTransition = document.startViewTransition(updateTheme)
      // Remove markers after animation
      themeTransition.finished.then(() => {
        document.documentElement.style.removeProperty('view-transition-name')
        document.documentElement.removeAttribute('data-theme-changing')
      })
    })
  }
}

// Initialize click event (on first load or page transition)
setupThemeToggle()
document.addEventListener('astro:after-swap', setupThemeToggle)
</script>

<!-- Language Switcher Script -->
<script is:inline>
  // 全局函数，避免作用域问题
  function toggleLanguageDropdown(event, dropdown, button) {
    event.stopPropagation();
    const isHidden = dropdown.classList.contains('hidden');
    
    if (isHidden) {
      dropdown.classList.remove('hidden');
      button.setAttribute('aria-expanded', 'true');
    } else {
      dropdown.classList.add('hidden');
      button.setAttribute('aria-expanded', 'false');
    }
  }
  
  function closeLanguageDropdownOnOutsideClick(event, dropdown, button) {
    if (!dropdown.classList.contains('hidden') && 
        !dropdown.contains(event.target) && 
        event.target !== button) {
      dropdown.classList.add('hidden');
      button.setAttribute('aria-expanded', 'false');
    }
  }

  function initLanguageSwitcher() {
    const languageButton = document.getElementById('language-switcher-button');
    const languageDropdown = document.getElementById('language-dropdown');
    
    if (!languageButton || !languageDropdown) return;
    
    // 使用直接函数而不是内部函数
    languageButton.onclick = (event) => toggleLanguageDropdown(event, languageDropdown, languageButton);
    document.addEventListener('click', (event) => closeLanguageDropdownOnOutsideClick(event, languageDropdown, languageButton));
    
    // 确保在Chrome中按钮可点击
    languageButton.style.cursor = 'pointer';
    languageButton.style.userSelect = 'none';
    languageButton.style.webkitUserSelect = 'none';
  }
  
  // 初始化事件监听
  document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
  document.addEventListener('astro:page-load', initLanguageSwitcher);
  document.addEventListener('astro:after-swap', initLanguageSwitcher);
</script>
